using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;

namespace Tangsem.Tooling.CodeGen.DbContext;

public class DbContextDesignerCodeGen
{
  public static string GenerateDbContextDesignerCode(Type dbContextType)
  {
    var entityTypes = dbContextType
      .GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.FlattenHierarchy)
      .Where(x => x.PropertyType.IsGenericType && x.PropertyType.GetGenericTypeDefinition() == typeof(DbSet<>))
      .Select(x => new
      {
        EntityType = x.PropertyType.GetGenericArguments()[0],
        DbSetProperty = x,
      })
      .ToList();

    var methodCodes = entityTypes.Select(et =>
$$"""

  public EntityEntry<{{et.EntityType.Name}}> Add{{et.EntityType.Name}}({{et.EntityType.Name}} entity)
  {
    return this.{{et.DbSetProperty.Name}}.Add(entity);
  }
""");

    var usingStmts = entityTypes
      .Select(x => x.EntityType)
      .Concat([typeof(EntityEntry<>)])
      .Select(x => x.Namespace)
      .Distinct()
      .OrderBy(x => x)
      .Select(ns => $"using {ns};").ToList();

    return $$"""
{{
  string.Join(Environment.NewLine, usingStmts)
}}

namespace {{dbContextType.Namespace}};

/// <summary>
/// Generated by {{nameof(DbContextDesignerCodeGen)}}.{{nameof(GenerateDbContextDesignerCode)}}.
/// </summary>
public partial class {{dbContextType.Name}}
{
  {{string.Join(Environment.NewLine, methodCodes)}}
}
""";
  }
}